{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "1e00c97b",
   "metadata": {},
   "source": [
    "# PROBLEM STATEMENT-1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8401ccb1",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib as mpl\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0c59714c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>COUNTRY</th>\n",
       "      <th>renewable energy produced in year 2015 in (%)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Africa</td>\n",
       "      <td>7.100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Argentina</td>\n",
       "      <td>12.913</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Brazil</td>\n",
       "      <td>38.632</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Chile</td>\n",
       "      <td>19.894</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>China</td>\n",
       "      <td>10.188</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Germany</td>\n",
       "      <td>13.671</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>India</td>\n",
       "      <td>6.295</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Japan</td>\n",
       "      <td>7.395</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Mexico</td>\n",
       "      <td>5.702</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>South Africa</td>\n",
       "      <td>1.270</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        COUNTRY  renewable energy produced in year 2015 in (%)\n",
       "0       Africa                                           7.100\n",
       "1     Argentina                                         12.913\n",
       "2        Brazil                                         38.632\n",
       "3         Chile                                         19.894\n",
       "4         China                                         10.188\n",
       "5       Germany                                         13.671\n",
       "6         India                                          6.295\n",
       "7         Japan                                          7.395\n",
       "8        Mexico                                          5.702\n",
       "9  South Africa                                          1.270"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rank=pd.read_csv(\"PS1(DATA).csv\")\n",
    "rank"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "0f1f577c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='COUNTRY'>"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "rank.plot.bar(x='COUNTRY',figsize=(10,5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "fa69d6c7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th>COUNTRY</th>\n",
       "      <th>Africa</th>\n",
       "      <th>Argentina</th>\n",
       "      <th>Brazil</th>\n",
       "      <th>Chile</th>\n",
       "      <th>China</th>\n",
       "      <th>Germany</th>\n",
       "      <th>India</th>\n",
       "      <th>Japan</th>\n",
       "      <th>Mexico</th>\n",
       "      <th>South Africa</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>COUNTRY</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Africa</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Argentina</th>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Brazil</th>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Chile</th>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>China</th>\n",
       "      <td>3.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Germany</th>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>India</th>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Japan</th>\n",
       "      <td>3.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mexico</th>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>South Africa</th>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "COUNTRY      Africa  Argentina Brazil Chile China Germany India Japan Mexico  \\\n",
       "COUNTRY                                                                        \n",
       "Africa           1.0       2.0    2.0   2.0   2.0     2.0   3.0   2.0    3.0   \n",
       "Argentina        3.0       1.0    2.0   2.0   3.0     2.0   3.0   3.0    3.0   \n",
       "Brazil           3.0       3.0    1.0   3.0   3.0     3.0   3.0   3.0    3.0   \n",
       "Chile            3.0       3.0    2.0   1.0   3.0     3.0   3.0   3.0    3.0   \n",
       "China            3.0       2.0    2.0   2.0   1.0     2.0   3.0   3.0    3.0   \n",
       "Germany          3.0       3.0    2.0   2.0   3.0     1.0   3.0   3.0    3.0   \n",
       "India            2.0       2.0    2.0   2.0   2.0     2.0   1.0   2.0    3.0   \n",
       "Japan            3.0       2.0    2.0   2.0   2.0     2.0   3.0   1.0    3.0   \n",
       "Mexico           2.0       2.0    2.0   2.0   2.0     2.0   2.0   2.0    1.0   \n",
       "South Africa     2.0       2.0    2.0   2.0   2.0     2.0   2.0   2.0    2.0   \n",
       "\n",
       "COUNTRY      South Africa  \n",
       "COUNTRY                    \n",
       "Africa                3.0  \n",
       "Argentina             3.0  \n",
       "Brazil                3.0  \n",
       "Chile                 3.0  \n",
       "China                 3.0  \n",
       "Germany               3.0  \n",
       "India                 3.0  \n",
       "Japan                 3.0  \n",
       "Mexico                3.0  \n",
       "South Africa          1.0  "
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "lst=[]\n",
    "lol=np.empty([10,10])\n",
    "\n",
    "for v in rank[\"renewable energy produced in year 2015 in (%)\"]:\n",
    "    for r in rank[\"renewable energy produced in year 2015 in (%)\"]:\n",
    "        if v>r:\n",
    "            l=3\n",
    "        elif v==r:\n",
    "            l=1\n",
    "        elif v<r:\n",
    "            l=2\n",
    "        #print(l)\n",
    "        lst.append(int(l))\n",
    "v=0\n",
    "for i in range(0,10):\n",
    "    for q in range(0,10):\n",
    "        lol[i][q]=lst[v]\n",
    "        v=v+1\n",
    "comp=pd.DataFrame(lol)\n",
    "comp.index=[rank[\"COUNTRY\"]]\n",
    "comp.columns=[rank[\"COUNTRY\"]]\n",
    "comp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "2e286f6e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the order of matrix :\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "invalid literal for int() with base 10: ''",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-7-675f7cf72b20>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mnumpy\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      3\u001b[0m \u001b[0ml\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m[\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 4\u001b[1;33m \u001b[0mn\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0minput\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"Enter the order of matrix :\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      5\u001b[0m \u001b[0ma\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mlol\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      6\u001b[0m \u001b[0mx\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0marray\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mValueError\u001b[0m: invalid literal for int() with base 10: ''"
     ]
    }
   ],
   "source": [
    "Names=list(rank[\"COUNTRY\"])\n",
    "import numpy as np\n",
    "l = []\n",
    "n = int(input(\"Enter the order of matrix :\")) \n",
    "a = lol\n",
    "x = np.array([[1],[1],[1],[1],[1],[1],[1],[1],[1],[1]])\n",
    " \n",
    "iteration = int(input('Enter maximum number of steps: '))\n",
    "\n",
    "lamda_old = 1.0\n",
    "step = 1\n",
    "while 1>0:\n",
    "    x0 = x\n",
    "    x = np.matmul(a,x)\n",
    " \n",
    " \n",
    "    lamda_new = max(abs(x))\n",
    "    x = x/lamda_new\n",
    "    l.append(lamda_new)\n",
    " \n",
    "    print('\\nSTEP %d' %(step))\n",
    "    print('----------')\n",
    "    print('Eigen Value = %0.4f' %(lamda_new))\n",
    "    print('Eigen Vector: ')\n",
    "    for i in range(n):\n",
    "        print('%0.4f\\t' % (x[i]))\n",
    " \n",
    "    step = step + 1\n",
    "    if step > iteration:\n",
    "        print('Not convergent in given maximum iteration!')\n",
    "        break\n",
    " \n",
    " \n",
    " \n",
    "    if (np.round(x,4) == np.round(x0,4)).all(): break\n",
    "\n",
    "print(len(l), max(l),min(l))\n",
    "from scipy.linalg import eig\n",
    "vals, vecs = eig(a)\n",
    "vals\n",
    "vec = abs(vecs[:,0])\n",
    "ranking = np.argsort(vec).tolist()\n",
    "ranking.reverse()\n",
    "[Names[i] for i in ranking]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "6c0de87a",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country</th>\n",
       "      <th>Renewable energy produced in year 2015 in (%)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>South Africa</td>\n",
       "      <td>1.270</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Mexico</td>\n",
       "      <td>5.702</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>India</td>\n",
       "      <td>6.295</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Africa</td>\n",
       "      <td>7.100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Japan</td>\n",
       "      <td>7.395</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>China</td>\n",
       "      <td>10.188</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Argentina</td>\n",
       "      <td>12.913</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Germany</td>\n",
       "      <td>13.671</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Chile</td>\n",
       "      <td>19.894</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Brazil</td>\n",
       "      <td>38.632</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Country  Renewable energy produced in year 2015 in (%)\n",
       "0  South Africa                                          1.270\n",
       "1        Mexico                                          5.702\n",
       "2         India                                          6.295\n",
       "3       Africa                                           7.100\n",
       "4         Japan                                          7.395\n",
       "5         China                                         10.188\n",
       "6     Argentina                                         12.913\n",
       "7       Germany                                         13.671\n",
       "8         Chile                                         19.894\n",
       "9        Brazil                                         38.632"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rank_result=pd.read_csv('PS1(RESULT).csv')\n",
    "rank_result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "1b3f0a07",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Country'>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "rank_result.plot.bar(x='Country',figsize=(10,5))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f4408d09",
   "metadata": {},
   "source": [
    "# PROBLEM STATEMENT-2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "82a01f47",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country</th>\n",
       "      <th>2006</th>\n",
       "      <th>2007</th>\n",
       "      <th>2008</th>\n",
       "      <th>2009</th>\n",
       "      <th>2010</th>\n",
       "      <th>2011</th>\n",
       "      <th>2012</th>\n",
       "      <th>2013</th>\n",
       "      <th>2014</th>\n",
       "      <th>2015</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Africa</td>\n",
       "      <td>6.714</td>\n",
       "      <td>6.619</td>\n",
       "      <td>6.325</td>\n",
       "      <td>6.371</td>\n",
       "      <td>6.643</td>\n",
       "      <td>6.789</td>\n",
       "      <td>6.586</td>\n",
       "      <td>6.804</td>\n",
       "      <td>7.075</td>\n",
       "      <td>7.100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Argentina</td>\n",
       "      <td>14.790</td>\n",
       "      <td>12.247</td>\n",
       "      <td>11.832</td>\n",
       "      <td>13.103</td>\n",
       "      <td>13.051</td>\n",
       "      <td>12.836</td>\n",
       "      <td>12.042</td>\n",
       "      <td>12.640</td>\n",
       "      <td>12.892</td>\n",
       "      <td>12.913</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Brazil</td>\n",
       "      <td>41.640</td>\n",
       "      <td>42.990</td>\n",
       "      <td>42.015</td>\n",
       "      <td>44.945</td>\n",
       "      <td>42.868</td>\n",
       "      <td>42.450</td>\n",
       "      <td>40.629</td>\n",
       "      <td>38.350</td>\n",
       "      <td>37.398</td>\n",
       "      <td>38.632</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Chile</td>\n",
       "      <td>21.390</td>\n",
       "      <td>17.570</td>\n",
       "      <td>19.625</td>\n",
       "      <td>20.457</td>\n",
       "      <td>18.015</td>\n",
       "      <td>16.253</td>\n",
       "      <td>16.677</td>\n",
       "      <td>16.909</td>\n",
       "      <td>18.754</td>\n",
       "      <td>19.894</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>China</td>\n",
       "      <td>5.230</td>\n",
       "      <td>5.370</td>\n",
       "      <td>6.827</td>\n",
       "      <td>6.500</td>\n",
       "      <td>7.140</td>\n",
       "      <td>6.636</td>\n",
       "      <td>7.994</td>\n",
       "      <td>8.387</td>\n",
       "      <td>9.619</td>\n",
       "      <td>10.188</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Germany</td>\n",
       "      <td>5.540</td>\n",
       "      <td>7.020</td>\n",
       "      <td>7.137</td>\n",
       "      <td>7.705</td>\n",
       "      <td>8.044</td>\n",
       "      <td>9.675</td>\n",
       "      <td>10.901</td>\n",
       "      <td>11.048</td>\n",
       "      <td>12.221</td>\n",
       "      <td>13.671</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>India</td>\n",
       "      <td>7.060</td>\n",
       "      <td>7.170</td>\n",
       "      <td>6.611</td>\n",
       "      <td>5.898</td>\n",
       "      <td>5.937</td>\n",
       "      <td>6.795</td>\n",
       "      <td>6.111</td>\n",
       "      <td>6.652</td>\n",
       "      <td>6.652</td>\n",
       "      <td>6.295</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Japan</td>\n",
       "      <td>4.940</td>\n",
       "      <td>4.410</td>\n",
       "      <td>4.456</td>\n",
       "      <td>4.632</td>\n",
       "      <td>5.252</td>\n",
       "      <td>5.278</td>\n",
       "      <td>5.182</td>\n",
       "      <td>5.627</td>\n",
       "      <td>6.376</td>\n",
       "      <td>7.395</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Mexico</td>\n",
       "      <td>5.290</td>\n",
       "      <td>4.940</td>\n",
       "      <td>6.344</td>\n",
       "      <td>4.698</td>\n",
       "      <td>5.949</td>\n",
       "      <td>5.571</td>\n",
       "      <td>5.164</td>\n",
       "      <td>4.779</td>\n",
       "      <td>6.361</td>\n",
       "      <td>5.702</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>South Africa</td>\n",
       "      <td>0.673</td>\n",
       "      <td>0.650</td>\n",
       "      <td>0.318</td>\n",
       "      <td>0.352</td>\n",
       "      <td>0.284</td>\n",
       "      <td>0.643</td>\n",
       "      <td>0.282</td>\n",
       "      <td>0.333</td>\n",
       "      <td>0.775</td>\n",
       "      <td>1.270</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>1.888</td>\n",
       "      <td>2.171</td>\n",
       "      <td>2.633</td>\n",
       "      <td>3.210</td>\n",
       "      <td>3.294</td>\n",
       "      <td>4.422</td>\n",
       "      <td>4.919</td>\n",
       "      <td>6.275</td>\n",
       "      <td>7.990</td>\n",
       "      <td>9.853</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>United States</td>\n",
       "      <td>4.408</td>\n",
       "      <td>4.128</td>\n",
       "      <td>4.750</td>\n",
       "      <td>5.515</td>\n",
       "      <td>5.562</td>\n",
       "      <td>6.559</td>\n",
       "      <td>6.541</td>\n",
       "      <td>6.746</td>\n",
       "      <td>6.859</td>\n",
       "      <td>7.047</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Philippines</td>\n",
       "      <td>18.061</td>\n",
       "      <td>15.883</td>\n",
       "      <td>16.730</td>\n",
       "      <td>16.105</td>\n",
       "      <td>13.705</td>\n",
       "      <td>14.876</td>\n",
       "      <td>14.986</td>\n",
       "      <td>13.318</td>\n",
       "      <td>12.525</td>\n",
       "      <td>12.019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Pakistan</td>\n",
       "      <td>11.963</td>\n",
       "      <td>11.707</td>\n",
       "      <td>9.979</td>\n",
       "      <td>10.296</td>\n",
       "      <td>10.571</td>\n",
       "      <td>10.798</td>\n",
       "      <td>4.061</td>\n",
       "      <td>16.054</td>\n",
       "      <td>11.003</td>\n",
       "      <td>10.744</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Argentina</td>\n",
       "      <td>14.790</td>\n",
       "      <td>12.247</td>\n",
       "      <td>11.832</td>\n",
       "      <td>13.103</td>\n",
       "      <td>13.051</td>\n",
       "      <td>12.836</td>\n",
       "      <td>12.042</td>\n",
       "      <td>12.640</td>\n",
       "      <td>12.892</td>\n",
       "      <td>12.913</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Indonesia</td>\n",
       "      <td>2.990</td>\n",
       "      <td>3.139</td>\n",
       "      <td>3.421</td>\n",
       "      <td>3.515</td>\n",
       "      <td>4.105</td>\n",
       "      <td>3.133</td>\n",
       "      <td>3.155</td>\n",
       "      <td>3.674</td>\n",
       "      <td>4.128</td>\n",
       "      <td>3.506</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Egypt</td>\n",
       "      <td>4.842</td>\n",
       "      <td>5.050</td>\n",
       "      <td>5.073</td>\n",
       "      <td>4.482</td>\n",
       "      <td>4.114</td>\n",
       "      <td>4.122</td>\n",
       "      <td>3.935</td>\n",
       "      <td>3.932</td>\n",
       "      <td>3.897</td>\n",
       "      <td>4.004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Malaysia</td>\n",
       "      <td>2.200</td>\n",
       "      <td>1.982</td>\n",
       "      <td>2.436</td>\n",
       "      <td>2.406</td>\n",
       "      <td>2.136</td>\n",
       "      <td>2.136</td>\n",
       "      <td>2.676</td>\n",
       "      <td>3.082</td>\n",
       "      <td>3.327</td>\n",
       "      <td>3.407</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Bangladesh</td>\n",
       "      <td>0.984</td>\n",
       "      <td>0.959</td>\n",
       "      <td>1.149</td>\n",
       "      <td>0.481</td>\n",
       "      <td>0.813</td>\n",
       "      <td>0.894</td>\n",
       "      <td>0.775</td>\n",
       "      <td>0.740</td>\n",
       "      <td>0.605</td>\n",
       "      <td>0.762</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Cambodia</td>\n",
       "      <td>32.301</td>\n",
       "      <td>33.220</td>\n",
       "      <td>31.887</td>\n",
       "      <td>29.811</td>\n",
       "      <td>27.582</td>\n",
       "      <td>31.337</td>\n",
       "      <td>28.681</td>\n",
       "      <td>26.213</td>\n",
       "      <td>25.133</td>\n",
       "      <td>24.863</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Country    2006    2007    2008    2009    2010    2011    2012  \\\n",
       "0          Africa    6.714   6.619   6.325   6.371   6.643   6.789   6.586   \n",
       "1        Argentina  14.790  12.247  11.832  13.103  13.051  12.836  12.042   \n",
       "2           Brazil  41.640  42.990  42.015  44.945  42.868  42.450  40.629   \n",
       "3            Chile  21.390  17.570  19.625  20.457  18.015  16.253  16.677   \n",
       "4            China   5.230   5.370   6.827   6.500   7.140   6.636   7.994   \n",
       "5          Germany   5.540   7.020   7.137   7.705   8.044   9.675  10.901   \n",
       "6            India   7.060   7.170   6.611   5.898   5.937   6.795   6.111   \n",
       "7            Japan   4.940   4.410   4.456   4.632   5.252   5.278   5.182   \n",
       "8           Mexico   5.290   4.940   6.344   4.698   5.949   5.571   5.164   \n",
       "9     South Africa   0.673   0.650   0.318   0.352   0.284   0.643   0.282   \n",
       "10  United Kingdom   1.888   2.171   2.633   3.210   3.294   4.422   4.919   \n",
       "11   United States   4.408   4.128   4.750   5.515   5.562   6.559   6.541   \n",
       "12     Philippines  18.061  15.883  16.730  16.105  13.705  14.876  14.986   \n",
       "13        Pakistan  11.963  11.707   9.979  10.296  10.571  10.798   4.061   \n",
       "14       Argentina  14.790  12.247  11.832  13.103  13.051  12.836  12.042   \n",
       "15       Indonesia   2.990   3.139   3.421   3.515   4.105   3.133   3.155   \n",
       "16           Egypt   4.842   5.050   5.073   4.482   4.114   4.122   3.935   \n",
       "17        Malaysia   2.200   1.982   2.436   2.406   2.136   2.136   2.676   \n",
       "18      Bangladesh   0.984   0.959   1.149   0.481   0.813   0.894   0.775   \n",
       "19        Cambodia  32.301  33.220  31.887  29.811  27.582  31.337  28.681   \n",
       "\n",
       "      2013    2014    2015  \n",
       "0    6.804   7.075   7.100  \n",
       "1   12.640  12.892  12.913  \n",
       "2   38.350  37.398  38.632  \n",
       "3   16.909  18.754  19.894  \n",
       "4    8.387   9.619  10.188  \n",
       "5   11.048  12.221  13.671  \n",
       "6    6.652   6.652   6.295  \n",
       "7    5.627   6.376   7.395  \n",
       "8    4.779   6.361   5.702  \n",
       "9    0.333   0.775   1.270  \n",
       "10   6.275   7.990   9.853  \n",
       "11   6.746   6.859   7.047  \n",
       "12  13.318  12.525  12.019  \n",
       "13  16.054  11.003  10.744  \n",
       "14  12.640  12.892  12.913  \n",
       "15   3.674   4.128   3.506  \n",
       "16   3.932   3.897   4.004  \n",
       "17   3.082   3.327   3.407  \n",
       "18   0.740   0.605   0.762  \n",
       "19  26.213  25.133  24.863  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "hypothesis=pd.read_csv('PS2(DATA).csv')\n",
    "hypothesis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "2fbdddd5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[10.3847, 9.973600000000001, 10.068999999999999, 10.17925, 9.905799999999997]\n",
      "mean from 2006-2010[x1]: 10.10247\n",
      "standard deviation from 2006-2010[s1]: 0.17\n"
     ]
    }
   ],
   "source": [
    "import statistics \n",
    "from statistics import mean\n",
    "data1=[]\n",
    "data1.append(hypothesis['2006'].mean())\n",
    "data1.append(hypothesis['2007'].mean())\n",
    "data1.append(hypothesis['2008'].mean())\n",
    "data1.append(hypothesis['2009'].mean())\n",
    "data1.append(hypothesis['2010'].mean())\n",
    "print(data1)\n",
    "m1=mean(data1)\n",
    "s1=round(statistics.pstdev(data1),2)\n",
    "print(\"mean from 2006-2010[x1]:\",m1)\n",
    "print(\"standard deviation from 2006-2010[s1]:\",s1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "805d3187",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[10.20195, 9.66695, 10.21015, 10.324099999999998, 10.6089]\n",
      "mean from 2011-2015[x2]: 10.20241\n",
      "standard deviation from 2011-2015[s1]: 0.31\n"
     ]
    }
   ],
   "source": [
    "data2=[]\n",
    "data2.append(hypothesis['2011'].mean())\n",
    "data2.append(hypothesis['2012'].mean())\n",
    "data2.append(hypothesis['2013'].mean())\n",
    "data2.append(hypothesis['2014'].mean())\n",
    "data2.append(hypothesis['2015'].mean())\n",
    "print(data2)\n",
    "m2=mean(data2)\n",
    "s2=round(statistics.pstdev(data2),2)\n",
    "print(\"mean from 2011-2015[x2]:\",m2)\n",
    "print(\"standard deviation from 2011-2015[s1]:\",s2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "cb693d5a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country</th>\n",
       "      <th>Africa</th>\n",
       "      <th>Argentina</th>\n",
       "      <th>Brazil</th>\n",
       "      <th>Chile</th>\n",
       "      <th>China</th>\n",
       "      <th>Germany</th>\n",
       "      <th>India</th>\n",
       "      <th>Japan</th>\n",
       "      <th>Mexico</th>\n",
       "      <th>...</th>\n",
       "      <th>United States</th>\n",
       "      <th>Philippines</th>\n",
       "      <th>Pakistan</th>\n",
       "      <th>Argentina.1</th>\n",
       "      <th>Indonesia</th>\n",
       "      <th>Egypt</th>\n",
       "      <th>Malaysia</th>\n",
       "      <th>Bangladesh</th>\n",
       "      <th>Cambodia</th>\n",
       "      <th>Average</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2006</td>\n",
       "      <td>6.714</td>\n",
       "      <td>14.790</td>\n",
       "      <td>41.640</td>\n",
       "      <td>21.390</td>\n",
       "      <td>5.230</td>\n",
       "      <td>5.540</td>\n",
       "      <td>7.060</td>\n",
       "      <td>4.940</td>\n",
       "      <td>5.290</td>\n",
       "      <td>...</td>\n",
       "      <td>4.408</td>\n",
       "      <td>18.061</td>\n",
       "      <td>11.963</td>\n",
       "      <td>14.790</td>\n",
       "      <td>2.990</td>\n",
       "      <td>4.842</td>\n",
       "      <td>2.200</td>\n",
       "      <td>0.984</td>\n",
       "      <td>32.301</td>\n",
       "      <td>10.38470</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2007</td>\n",
       "      <td>6.619</td>\n",
       "      <td>12.247</td>\n",
       "      <td>42.990</td>\n",
       "      <td>17.570</td>\n",
       "      <td>5.370</td>\n",
       "      <td>7.020</td>\n",
       "      <td>7.170</td>\n",
       "      <td>4.410</td>\n",
       "      <td>4.940</td>\n",
       "      <td>...</td>\n",
       "      <td>4.128</td>\n",
       "      <td>15.883</td>\n",
       "      <td>11.707</td>\n",
       "      <td>12.247</td>\n",
       "      <td>3.139</td>\n",
       "      <td>5.050</td>\n",
       "      <td>1.982</td>\n",
       "      <td>0.959</td>\n",
       "      <td>33.220</td>\n",
       "      <td>9.97360</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2008</td>\n",
       "      <td>6.325</td>\n",
       "      <td>11.832</td>\n",
       "      <td>42.015</td>\n",
       "      <td>19.625</td>\n",
       "      <td>6.827</td>\n",
       "      <td>7.137</td>\n",
       "      <td>6.611</td>\n",
       "      <td>4.456</td>\n",
       "      <td>6.344</td>\n",
       "      <td>...</td>\n",
       "      <td>4.750</td>\n",
       "      <td>16.730</td>\n",
       "      <td>9.979</td>\n",
       "      <td>11.832</td>\n",
       "      <td>3.421</td>\n",
       "      <td>5.073</td>\n",
       "      <td>2.436</td>\n",
       "      <td>1.149</td>\n",
       "      <td>31.887</td>\n",
       "      <td>10.06900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2009</td>\n",
       "      <td>6.371</td>\n",
       "      <td>13.103</td>\n",
       "      <td>44.945</td>\n",
       "      <td>20.457</td>\n",
       "      <td>6.500</td>\n",
       "      <td>7.705</td>\n",
       "      <td>5.898</td>\n",
       "      <td>4.632</td>\n",
       "      <td>4.698</td>\n",
       "      <td>...</td>\n",
       "      <td>5.515</td>\n",
       "      <td>16.105</td>\n",
       "      <td>10.296</td>\n",
       "      <td>13.103</td>\n",
       "      <td>3.515</td>\n",
       "      <td>4.482</td>\n",
       "      <td>2.406</td>\n",
       "      <td>0.481</td>\n",
       "      <td>29.811</td>\n",
       "      <td>10.17925</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2010</td>\n",
       "      <td>6.643</td>\n",
       "      <td>13.051</td>\n",
       "      <td>42.868</td>\n",
       "      <td>18.015</td>\n",
       "      <td>7.140</td>\n",
       "      <td>8.044</td>\n",
       "      <td>5.937</td>\n",
       "      <td>5.252</td>\n",
       "      <td>5.949</td>\n",
       "      <td>...</td>\n",
       "      <td>5.562</td>\n",
       "      <td>13.705</td>\n",
       "      <td>10.571</td>\n",
       "      <td>13.051</td>\n",
       "      <td>4.105</td>\n",
       "      <td>4.114</td>\n",
       "      <td>2.136</td>\n",
       "      <td>0.813</td>\n",
       "      <td>27.582</td>\n",
       "      <td>9.90580</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2011</td>\n",
       "      <td>6.789</td>\n",
       "      <td>12.836</td>\n",
       "      <td>42.450</td>\n",
       "      <td>16.253</td>\n",
       "      <td>6.636</td>\n",
       "      <td>9.675</td>\n",
       "      <td>6.795</td>\n",
       "      <td>5.278</td>\n",
       "      <td>5.571</td>\n",
       "      <td>...</td>\n",
       "      <td>6.559</td>\n",
       "      <td>14.876</td>\n",
       "      <td>10.798</td>\n",
       "      <td>12.836</td>\n",
       "      <td>3.133</td>\n",
       "      <td>4.122</td>\n",
       "      <td>2.136</td>\n",
       "      <td>0.894</td>\n",
       "      <td>31.337</td>\n",
       "      <td>10.20195</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2012</td>\n",
       "      <td>6.586</td>\n",
       "      <td>12.042</td>\n",
       "      <td>40.629</td>\n",
       "      <td>16.677</td>\n",
       "      <td>7.994</td>\n",
       "      <td>10.901</td>\n",
       "      <td>6.111</td>\n",
       "      <td>5.182</td>\n",
       "      <td>5.164</td>\n",
       "      <td>...</td>\n",
       "      <td>6.541</td>\n",
       "      <td>14.986</td>\n",
       "      <td>4.061</td>\n",
       "      <td>12.042</td>\n",
       "      <td>3.155</td>\n",
       "      <td>3.935</td>\n",
       "      <td>2.676</td>\n",
       "      <td>0.775</td>\n",
       "      <td>28.681</td>\n",
       "      <td>9.66695</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2013</td>\n",
       "      <td>6.804</td>\n",
       "      <td>12.640</td>\n",
       "      <td>38.350</td>\n",
       "      <td>16.909</td>\n",
       "      <td>8.387</td>\n",
       "      <td>11.048</td>\n",
       "      <td>6.652</td>\n",
       "      <td>5.627</td>\n",
       "      <td>4.779</td>\n",
       "      <td>...</td>\n",
       "      <td>6.746</td>\n",
       "      <td>13.318</td>\n",
       "      <td>16.054</td>\n",
       "      <td>12.640</td>\n",
       "      <td>3.674</td>\n",
       "      <td>3.932</td>\n",
       "      <td>3.082</td>\n",
       "      <td>0.740</td>\n",
       "      <td>26.213</td>\n",
       "      <td>10.21015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2014</td>\n",
       "      <td>7.075</td>\n",
       "      <td>12.892</td>\n",
       "      <td>37.398</td>\n",
       "      <td>18.754</td>\n",
       "      <td>9.619</td>\n",
       "      <td>12.221</td>\n",
       "      <td>6.652</td>\n",
       "      <td>6.376</td>\n",
       "      <td>6.361</td>\n",
       "      <td>...</td>\n",
       "      <td>6.859</td>\n",
       "      <td>12.525</td>\n",
       "      <td>11.003</td>\n",
       "      <td>12.892</td>\n",
       "      <td>4.128</td>\n",
       "      <td>3.897</td>\n",
       "      <td>3.327</td>\n",
       "      <td>0.605</td>\n",
       "      <td>25.133</td>\n",
       "      <td>10.32410</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2015</td>\n",
       "      <td>7.100</td>\n",
       "      <td>12.913</td>\n",
       "      <td>38.632</td>\n",
       "      <td>19.894</td>\n",
       "      <td>10.188</td>\n",
       "      <td>13.671</td>\n",
       "      <td>6.295</td>\n",
       "      <td>7.395</td>\n",
       "      <td>5.702</td>\n",
       "      <td>...</td>\n",
       "      <td>7.047</td>\n",
       "      <td>12.019</td>\n",
       "      <td>10.744</td>\n",
       "      <td>12.913</td>\n",
       "      <td>3.506</td>\n",
       "      <td>4.004</td>\n",
       "      <td>3.407</td>\n",
       "      <td>0.762</td>\n",
       "      <td>24.863</td>\n",
       "      <td>10.60890</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10 rows × 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Country  Africa  Argentina  Brazil   Chile   China  Germany  India  Japan  \\\n",
       "0     2006   6.714     14.790  41.640  21.390   5.230    5.540  7.060  4.940   \n",
       "1     2007   6.619     12.247  42.990  17.570   5.370    7.020  7.170  4.410   \n",
       "2     2008   6.325     11.832  42.015  19.625   6.827    7.137  6.611  4.456   \n",
       "3     2009   6.371     13.103  44.945  20.457   6.500    7.705  5.898  4.632   \n",
       "4     2010   6.643     13.051  42.868  18.015   7.140    8.044  5.937  5.252   \n",
       "5     2011   6.789     12.836  42.450  16.253   6.636    9.675  6.795  5.278   \n",
       "6     2012   6.586     12.042  40.629  16.677   7.994   10.901  6.111  5.182   \n",
       "7     2013   6.804     12.640  38.350  16.909   8.387   11.048  6.652  5.627   \n",
       "8     2014   7.075     12.892  37.398  18.754   9.619   12.221  6.652  6.376   \n",
       "9     2015   7.100     12.913  38.632  19.894  10.188   13.671  6.295  7.395   \n",
       "\n",
       "   Mexico  ...  United States  Philippines  Pakistan  Argentina.1  Indonesia  \\\n",
       "0   5.290  ...          4.408       18.061    11.963       14.790      2.990   \n",
       "1   4.940  ...          4.128       15.883    11.707       12.247      3.139   \n",
       "2   6.344  ...          4.750       16.730     9.979       11.832      3.421   \n",
       "3   4.698  ...          5.515       16.105    10.296       13.103      3.515   \n",
       "4   5.949  ...          5.562       13.705    10.571       13.051      4.105   \n",
       "5   5.571  ...          6.559       14.876    10.798       12.836      3.133   \n",
       "6   5.164  ...          6.541       14.986     4.061       12.042      3.155   \n",
       "7   4.779  ...          6.746       13.318    16.054       12.640      3.674   \n",
       "8   6.361  ...          6.859       12.525    11.003       12.892      4.128   \n",
       "9   5.702  ...          7.047       12.019    10.744       12.913      3.506   \n",
       "\n",
       "   Egypt  Malaysia  Bangladesh  Cambodia   Average  \n",
       "0  4.842     2.200       0.984    32.301  10.38470  \n",
       "1  5.050     1.982       0.959    33.220   9.97360  \n",
       "2  5.073     2.436       1.149    31.887  10.06900  \n",
       "3  4.482     2.406       0.481    29.811  10.17925  \n",
       "4  4.114     2.136       0.813    27.582   9.90580  \n",
       "5  4.122     2.136       0.894    31.337  10.20195  \n",
       "6  3.935     2.676       0.775    28.681   9.66695  \n",
       "7  3.932     3.082       0.740    26.213  10.21015  \n",
       "8  3.897     3.327       0.605    25.133  10.32410  \n",
       "9  4.004     3.407       0.762    24.863  10.60890  \n",
       "\n",
       "[10 rows x 22 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hypothesis2=pd.read_csv('ps2(data2).csv')\n",
    "hypothesis2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "bdf82346",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>AVG1(2006-2010)</th>\n",
       "      <th>AVG2(2011-2015)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10.38470</td>\n",
       "      <td>10.20195</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>9.97360</td>\n",
       "      <td>9.66695</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10.06900</td>\n",
       "      <td>10.21015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10.17925</td>\n",
       "      <td>10.32410</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9.90580</td>\n",
       "      <td>10.60890</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   AVG1(2006-2010)  AVG2(2011-2015)\n",
       "0         10.38470         10.20195\n",
       "1          9.97360          9.66695\n",
       "2         10.06900         10.21015\n",
       "3         10.17925         10.32410\n",
       "4          9.90580         10.60890"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "avg=pd.read_csv('ps2(average).csv')\n",
    "avg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "7dbda555",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.25"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import math\n",
    "Sp=round(math.sqrt((pow(s1,2)+pow(s2,2))/2),2)\n",
    "Sp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "47bae1b8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.63"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t=round((m2-m1)/(Sp*math.sqrt(0.2+0.2)),2)\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "d3f5a8ef",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.63\n",
      "ACCEPT NULL HYPOTHESIS\n"
     ]
    }
   ],
   "source": [
    "ta=2.26\n",
    "print(t)\n",
    "if(t > ta):\n",
    "    print(\"REJECT NULL HYPOTHESIS\")\n",
    "else:\n",
    "    print(\"ACCEPT NULL HYPOTHESIS\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e8aa0df1",
   "metadata": {},
   "source": [
    "# problem statement-3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "f7c09bdd",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>COUNTRY</th>\n",
       "      <th>2000</th>\n",
       "      <th>2001</th>\n",
       "      <th>2002</th>\n",
       "      <th>2003</th>\n",
       "      <th>2004</th>\n",
       "      <th>2005</th>\n",
       "      <th>2006</th>\n",
       "      <th>2007</th>\n",
       "      <th>2008</th>\n",
       "      <th>...</th>\n",
       "      <th>2010</th>\n",
       "      <th>2011</th>\n",
       "      <th>2012</th>\n",
       "      <th>2013</th>\n",
       "      <th>2014</th>\n",
       "      <th>2015</th>\n",
       "      <th>2016</th>\n",
       "      <th>2017</th>\n",
       "      <th>2018</th>\n",
       "      <th>2019</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Africa</td>\n",
       "      <td>75.245817</td>\n",
       "      <td>80.864115</td>\n",
       "      <td>85.181468</td>\n",
       "      <td>82.872601</td>\n",
       "      <td>87.405469</td>\n",
       "      <td>89.065734</td>\n",
       "      <td>92.240553</td>\n",
       "      <td>95.340562</td>\n",
       "      <td>97.157209</td>\n",
       "      <td>...</td>\n",
       "      <td>107.426833</td>\n",
       "      <td>110.444821</td>\n",
       "      <td>110.95230</td>\n",
       "      <td>117.672846</td>\n",
       "      <td>123.726795</td>\n",
       "      <td>119.85682</td>\n",
       "      <td>115.80125</td>\n",
       "      <td>123.815625</td>\n",
       "      <td>130.38784</td>\n",
       "      <td>132.734791</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Argentina</td>\n",
       "      <td>28.486000</td>\n",
       "      <td>36.653000</td>\n",
       "      <td>35.492000</td>\n",
       "      <td>33.475000</td>\n",
       "      <td>30.136000</td>\n",
       "      <td>33.664000</td>\n",
       "      <td>37.571000</td>\n",
       "      <td>30.063000</td>\n",
       "      <td>30.113000</td>\n",
       "      <td>...</td>\n",
       "      <td>33.019470</td>\n",
       "      <td>31.033530</td>\n",
       "      <td>28.71198</td>\n",
       "      <td>32.512590</td>\n",
       "      <td>32.332410</td>\n",
       "      <td>31.93938</td>\n",
       "      <td>29.40498</td>\n",
       "      <td>31.459230</td>\n",
       "      <td>31.96215</td>\n",
       "      <td>27.334890</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Brazil</td>\n",
       "      <td>301.359000</td>\n",
       "      <td>265.197000</td>\n",
       "      <td>283.231000</td>\n",
       "      <td>302.560000</td>\n",
       "      <td>317.589000</td>\n",
       "      <td>334.082000</td>\n",
       "      <td>345.317000</td>\n",
       "      <td>370.275000</td>\n",
       "      <td>365.861000</td>\n",
       "      <td>...</td>\n",
       "      <td>399.256000</td>\n",
       "      <td>424.050000</td>\n",
       "      <td>411.18900</td>\n",
       "      <td>387.082000</td>\n",
       "      <td>369.705000</td>\n",
       "      <td>356.14600</td>\n",
       "      <td>377.10200</td>\n",
       "      <td>367.197000</td>\n",
       "      <td>385.08100</td>\n",
       "      <td>393.898000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Chile</td>\n",
       "      <td>19.553000</td>\n",
       "      <td>20.793000</td>\n",
       "      <td>22.042000</td>\n",
       "      <td>21.457000</td>\n",
       "      <td>21.759000</td>\n",
       "      <td>26.218000</td>\n",
       "      <td>28.838000</td>\n",
       "      <td>22.899000</td>\n",
       "      <td>23.951000</td>\n",
       "      <td>...</td>\n",
       "      <td>21.641000</td>\n",
       "      <td>20.937000</td>\n",
       "      <td>19.97700</td>\n",
       "      <td>19.678000</td>\n",
       "      <td>22.814000</td>\n",
       "      <td>23.40300</td>\n",
       "      <td>22.80800</td>\n",
       "      <td>20.889000</td>\n",
       "      <td>22.89900</td>\n",
       "      <td>20.665260</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>China</td>\n",
       "      <td>220.190000</td>\n",
       "      <td>274.658000</td>\n",
       "      <td>285.094000</td>\n",
       "      <td>280.844000</td>\n",
       "      <td>350.009000</td>\n",
       "      <td>393.047000</td>\n",
       "      <td>414.769000</td>\n",
       "      <td>471.354000</td>\n",
       "      <td>565.548000</td>\n",
       "      <td>...</td>\n",
       "      <td>686.736000</td>\n",
       "      <td>668.100000</td>\n",
       "      <td>855.60000</td>\n",
       "      <td>892.100000</td>\n",
       "      <td>1060.100000</td>\n",
       "      <td>1112.70000</td>\n",
       "      <td>1174.80000</td>\n",
       "      <td>1193.100000</td>\n",
       "      <td>1232.90000</td>\n",
       "      <td>1302.100000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Germany</td>\n",
       "      <td>9.500000</td>\n",
       "      <td>10.500000</td>\n",
       "      <td>15.800000</td>\n",
       "      <td>19.200000</td>\n",
       "      <td>26.100000</td>\n",
       "      <td>27.900000</td>\n",
       "      <td>31.400000</td>\n",
       "      <td>40.500000</td>\n",
       "      <td>41.400000</td>\n",
       "      <td>...</td>\n",
       "      <td>38.600000</td>\n",
       "      <td>49.900000</td>\n",
       "      <td>51.60000</td>\n",
       "      <td>52.700000</td>\n",
       "      <td>58.500000</td>\n",
       "      <td>80.60000</td>\n",
       "      <td>80.00000</td>\n",
       "      <td>105.700000</td>\n",
       "      <td>110.00000</td>\n",
       "      <td>125.900000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>India</td>\n",
       "      <td>73.717000</td>\n",
       "      <td>72.960000</td>\n",
       "      <td>67.735000</td>\n",
       "      <td>79.994000</td>\n",
       "      <td>89.607000</td>\n",
       "      <td>97.404270</td>\n",
       "      <td>112.410610</td>\n",
       "      <td>122.406940</td>\n",
       "      <td>115.006110</td>\n",
       "      <td>...</td>\n",
       "      <td>111.377910</td>\n",
       "      <td>131.632780</td>\n",
       "      <td>115.65492</td>\n",
       "      <td>131.616110</td>\n",
       "      <td>130.328160</td>\n",
       "      <td>132.26015</td>\n",
       "      <td>128.61065</td>\n",
       "      <td>135.864570</td>\n",
       "      <td>141.33102</td>\n",
       "      <td>161.740870</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Japan</td>\n",
       "      <td>86.380000</td>\n",
       "      <td>83.324000</td>\n",
       "      <td>81.554000</td>\n",
       "      <td>93.661000</td>\n",
       "      <td>93.122000</td>\n",
       "      <td>75.705000</td>\n",
       "      <td>86.649000</td>\n",
       "      <td>73.269000</td>\n",
       "      <td>75.684000</td>\n",
       "      <td>...</td>\n",
       "      <td>83.432000</td>\n",
       "      <td>84.551000</td>\n",
       "      <td>76.17700</td>\n",
       "      <td>79.036000</td>\n",
       "      <td>83.162000</td>\n",
       "      <td>86.75100</td>\n",
       "      <td>79.13800</td>\n",
       "      <td>83.417000</td>\n",
       "      <td>80.63400</td>\n",
       "      <td>79.819740</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Mexico</td>\n",
       "      <td>32.802000</td>\n",
       "      <td>28.217000</td>\n",
       "      <td>24.701000</td>\n",
       "      <td>19.681000</td>\n",
       "      <td>24.954000</td>\n",
       "      <td>27.382000</td>\n",
       "      <td>30.090000</td>\n",
       "      <td>27.003000</td>\n",
       "      <td>38.786000</td>\n",
       "      <td>...</td>\n",
       "      <td>36.790000</td>\n",
       "      <td>35.928000</td>\n",
       "      <td>31.58700</td>\n",
       "      <td>27.722000</td>\n",
       "      <td>38.549000</td>\n",
       "      <td>30.61400</td>\n",
       "      <td>29.74400</td>\n",
       "      <td>31.739000</td>\n",
       "      <td>32.38400</td>\n",
       "      <td>23.845140</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>South Africa</td>\n",
       "      <td>1.343000</td>\n",
       "      <td>2.061000</td>\n",
       "      <td>2.357000</td>\n",
       "      <td>0.777000</td>\n",
       "      <td>0.941000</td>\n",
       "      <td>1.319000</td>\n",
       "      <td>2.869000</td>\n",
       "      <td>0.859000</td>\n",
       "      <td>1.191000</td>\n",
       "      <td>...</td>\n",
       "      <td>2.093000</td>\n",
       "      <td>2.036000</td>\n",
       "      <td>1.19300</td>\n",
       "      <td>1.106820</td>\n",
       "      <td>0.903870</td>\n",
       "      <td>0.80190</td>\n",
       "      <td>0.67419</td>\n",
       "      <td>0.801900</td>\n",
       "      <td>1.09296</td>\n",
       "      <td>1.076130</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        COUNTRY        2000        2001        2002        2003        2004  \\\n",
       "0       Africa    75.245817   80.864115   85.181468   82.872601   87.405469   \n",
       "1     Argentina   28.486000   36.653000   35.492000   33.475000   30.136000   \n",
       "2        Brazil  301.359000  265.197000  283.231000  302.560000  317.589000   \n",
       "3         Chile   19.553000   20.793000   22.042000   21.457000   21.759000   \n",
       "4         China  220.190000  274.658000  285.094000  280.844000  350.009000   \n",
       "5       Germany    9.500000   10.500000   15.800000   19.200000   26.100000   \n",
       "6         India   73.717000   72.960000   67.735000   79.994000   89.607000   \n",
       "7         Japan   86.380000   83.324000   81.554000   93.661000   93.122000   \n",
       "8        Mexico   32.802000   28.217000   24.701000   19.681000   24.954000   \n",
       "9  South Africa    1.343000    2.061000    2.357000    0.777000    0.941000   \n",
       "\n",
       "         2005        2006        2007        2008  ...        2010  \\\n",
       "0   89.065734   92.240553   95.340562   97.157209  ...  107.426833   \n",
       "1   33.664000   37.571000   30.063000   30.113000  ...   33.019470   \n",
       "2  334.082000  345.317000  370.275000  365.861000  ...  399.256000   \n",
       "3   26.218000   28.838000   22.899000   23.951000  ...   21.641000   \n",
       "4  393.047000  414.769000  471.354000  565.548000  ...  686.736000   \n",
       "5   27.900000   31.400000   40.500000   41.400000  ...   38.600000   \n",
       "6   97.404270  112.410610  122.406940  115.006110  ...  111.377910   \n",
       "7   75.705000   86.649000   73.269000   75.684000  ...   83.432000   \n",
       "8   27.382000   30.090000   27.003000   38.786000  ...   36.790000   \n",
       "9    1.319000    2.869000    0.859000    1.191000  ...    2.093000   \n",
       "\n",
       "         2011       2012        2013         2014        2015        2016  \\\n",
       "0  110.444821  110.95230  117.672846   123.726795   119.85682   115.80125   \n",
       "1   31.033530   28.71198   32.512590    32.332410    31.93938    29.40498   \n",
       "2  424.050000  411.18900  387.082000   369.705000   356.14600   377.10200   \n",
       "3   20.937000   19.97700   19.678000    22.814000    23.40300    22.80800   \n",
       "4  668.100000  855.60000  892.100000  1060.100000  1112.70000  1174.80000   \n",
       "5   49.900000   51.60000   52.700000    58.500000    80.60000    80.00000   \n",
       "6  131.632780  115.65492  131.616110   130.328160   132.26015   128.61065   \n",
       "7   84.551000   76.17700   79.036000    83.162000    86.75100    79.13800   \n",
       "8   35.928000   31.58700   27.722000    38.549000    30.61400    29.74400   \n",
       "9    2.036000    1.19300    1.106820     0.903870     0.80190     0.67419   \n",
       "\n",
       "          2017        2018         2019  \n",
       "0   123.815625   130.38784   132.734791  \n",
       "1    31.459230    31.96215    27.334890  \n",
       "2   367.197000   385.08100   393.898000  \n",
       "3    20.889000    22.89900    20.665260  \n",
       "4  1193.100000  1232.90000  1302.100000  \n",
       "5   105.700000   110.00000   125.900000  \n",
       "6   135.864570   141.33102   161.740870  \n",
       "7    83.417000    80.63400    79.819740  \n",
       "8    31.739000    32.38400    23.845140  \n",
       "9     0.801900     1.09296     1.076130  \n",
       "\n",
       "[10 rows x 21 columns]"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "df=pd.read_csv('ps222.csv')\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "f0b1d719",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>6</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>COUNTRY</th>\n",
       "      <td>India</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000</th>\n",
       "      <td>73.717</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2001</th>\n",
       "      <td>72.96</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2002</th>\n",
       "      <td>67.735</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2003</th>\n",
       "      <td>79.994</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2004</th>\n",
       "      <td>89.607</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2005</th>\n",
       "      <td>97.40427</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2006</th>\n",
       "      <td>112.41061</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2007</th>\n",
       "      <td>122.40694</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2008</th>\n",
       "      <td>115.00611</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2009</th>\n",
       "      <td>106.18769</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2010</th>\n",
       "      <td>111.37791</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011</th>\n",
       "      <td>131.63278</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012</th>\n",
       "      <td>115.65492</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2013</th>\n",
       "      <td>131.61611</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014</th>\n",
       "      <td>130.32816</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015</th>\n",
       "      <td>132.26015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016</th>\n",
       "      <td>128.61065</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017</th>\n",
       "      <td>135.86457</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018</th>\n",
       "      <td>141.33102</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019</th>\n",
       "      <td>161.74087</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 6\n",
       "COUNTRY      India\n",
       "2000        73.717\n",
       "2001         72.96\n",
       "2002        67.735\n",
       "2003        79.994\n",
       "2004        89.607\n",
       "2005      97.40427\n",
       "2006     112.41061\n",
       "2007     122.40694\n",
       "2008     115.00611\n",
       "2009     106.18769\n",
       "2010     111.37791\n",
       "2011     131.63278\n",
       "2012     115.65492\n",
       "2013     131.61611\n",
       "2014     130.32816\n",
       "2015     132.26015\n",
       "2016     128.61065\n",
       "2017     135.86457\n",
       "2018     141.33102\n",
       "2019     161.74087"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "taken=df.iloc[6]\n",
    "a=pd.DataFrame(taken)\n",
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "27a5736c",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "plt.figure(figsize=(10,4))\n",
    "plt.scatter(df.columns[1:],df.iloc[6,1:])\n",
    "plt.xlabel('years')\n",
    "plt.ylabel('renewable energy produced in india in %')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "6ae2ba8f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Y</th>\n",
       "      <th>X</th>\n",
       "      <th>XY</th>\n",
       "      <th>X^2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2000</th>\n",
       "      <td>73.717</td>\n",
       "      <td>1</td>\n",
       "      <td>73.717</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2001</th>\n",
       "      <td>72.96</td>\n",
       "      <td>2</td>\n",
       "      <td>145.92</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2002</th>\n",
       "      <td>67.735</td>\n",
       "      <td>3</td>\n",
       "      <td>203.205</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2003</th>\n",
       "      <td>79.994</td>\n",
       "      <td>4</td>\n",
       "      <td>319.976</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2004</th>\n",
       "      <td>89.607</td>\n",
       "      <td>5</td>\n",
       "      <td>448.035</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2005</th>\n",
       "      <td>97.40427</td>\n",
       "      <td>6</td>\n",
       "      <td>584.42562</td>\n",
       "      <td>36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2006</th>\n",
       "      <td>112.41061</td>\n",
       "      <td>7</td>\n",
       "      <td>786.87427</td>\n",
       "      <td>49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2007</th>\n",
       "      <td>122.40694</td>\n",
       "      <td>8</td>\n",
       "      <td>979.25552</td>\n",
       "      <td>64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2008</th>\n",
       "      <td>115.00611</td>\n",
       "      <td>9</td>\n",
       "      <td>1035.05499</td>\n",
       "      <td>81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2009</th>\n",
       "      <td>106.18769</td>\n",
       "      <td>10</td>\n",
       "      <td>1061.8769</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2010</th>\n",
       "      <td>111.37791</td>\n",
       "      <td>11</td>\n",
       "      <td>1225.15701</td>\n",
       "      <td>121</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011</th>\n",
       "      <td>131.63278</td>\n",
       "      <td>12</td>\n",
       "      <td>1579.59336</td>\n",
       "      <td>144</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012</th>\n",
       "      <td>115.65492</td>\n",
       "      <td>13</td>\n",
       "      <td>1503.51396</td>\n",
       "      <td>169</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2013</th>\n",
       "      <td>131.61611</td>\n",
       "      <td>14</td>\n",
       "      <td>1842.62554</td>\n",
       "      <td>196</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014</th>\n",
       "      <td>130.32816</td>\n",
       "      <td>15</td>\n",
       "      <td>1954.9224</td>\n",
       "      <td>225</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015</th>\n",
       "      <td>132.26015</td>\n",
       "      <td>16</td>\n",
       "      <td>2116.1624</td>\n",
       "      <td>256</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016</th>\n",
       "      <td>128.61065</td>\n",
       "      <td>17</td>\n",
       "      <td>2186.38105</td>\n",
       "      <td>289</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017</th>\n",
       "      <td>135.86457</td>\n",
       "      <td>18</td>\n",
       "      <td>2445.56226</td>\n",
       "      <td>324</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018</th>\n",
       "      <td>141.33102</td>\n",
       "      <td>19</td>\n",
       "      <td>2685.28938</td>\n",
       "      <td>361</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019</th>\n",
       "      <td>161.74087</td>\n",
       "      <td>20</td>\n",
       "      <td>3234.8174</td>\n",
       "      <td>400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sigma</th>\n",
       "      <td>2257.84576</td>\n",
       "      <td>210</td>\n",
       "      <td>26412.36506</td>\n",
       "      <td>2870</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mean</th>\n",
       "      <td>112.892288</td>\n",
       "      <td>10.5</td>\n",
       "      <td>1320.618253</td>\n",
       "      <td>143.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                Y     X           XY    X^2\n",
       "2000       73.717     1       73.717      1\n",
       "2001        72.96     2       145.92      4\n",
       "2002       67.735     3      203.205      9\n",
       "2003       79.994     4      319.976     16\n",
       "2004       89.607     5      448.035     25\n",
       "2005     97.40427     6    584.42562     36\n",
       "2006    112.41061     7    786.87427     49\n",
       "2007    122.40694     8    979.25552     64\n",
       "2008    115.00611     9   1035.05499     81\n",
       "2009    106.18769    10    1061.8769    100\n",
       "2010    111.37791    11   1225.15701    121\n",
       "2011    131.63278    12   1579.59336    144\n",
       "2012    115.65492    13   1503.51396    169\n",
       "2013    131.61611    14   1842.62554    196\n",
       "2014    130.32816    15    1954.9224    225\n",
       "2015    132.26015    16    2116.1624    256\n",
       "2016    128.61065    17   2186.38105    289\n",
       "2017    135.86457    18   2445.56226    324\n",
       "2018    141.33102    19   2685.28938    361\n",
       "2019    161.74087    20    3234.8174    400\n",
       "Sigma  2257.84576   210  26412.36506   2870\n",
       "Mean   112.892288  10.5  1320.618253  143.5"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "table=pd.DataFrame(df.iloc[6,1:])\n",
    "table.columns=['Y']\n",
    "table['X']=range(1,21)\n",
    "table['XY']=table['Y']*table['X']\n",
    "table['X^2']=table['X']**2\n",
    "sum=pd.DataFrame(table.sum())\n",
    "sum.columns=['Sigma']\n",
    "sum\n",
    "mean=pd.DataFrame(table.mean())\n",
    "mean.columns=['Mean']\n",
    "mean\n",
    "table=pd.concat([table,sum.T,mean.T])\n",
    "table\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "7b218adf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "b= 4.067645984962412\n"
     ]
    }
   ],
   "source": [
    "numerator=table['XY'].loc['Sigma']-table['X'].loc['Sigma']*table['Y'].loc['Sigma']/20\n",
    "denominator=table['X^2'].loc['Sigma']-table['X'].loc['Sigma']**2/20\n",
    "b=numerator/denominator\n",
    "print(\"b=\",b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "c189fe00",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      Predicted capacity\n",
      "2020          155.602571\n",
      "2021          159.670217\n",
      "2022          163.737863\n",
      "2023          167.805509\n",
      "2024          171.873155\n",
      "2025          175.940801\n",
      "2026          180.008447\n",
      "2027          184.076093\n",
      "2028          188.143739\n",
      "2029          192.211385\n",
      "2030          196.279031\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def eq_regression(x):\n",
    "    y=table['Y'].loc['Mean']+b*(x-table['X'].loc['Mean'])\n",
    "    return(y)\n",
    "plt.figure(figsize=(10,6))\n",
    "x_values=[]\n",
    "y_values=[]\n",
    "for x in range(21,32):\n",
    "    x_values.append(x)\n",
    "    y_values.append(eq_regression(x))\n",
    "plt.scatter([range(21,32)],y_values)\n",
    "predictions=pd.DataFrame(y_values,[i+1999 for i in x_values])\n",
    "predictions.columns=['Predicted capacity']\n",
    "print(predictions)\n",
    "\n",
    "temp=[]\n",
    "for i in df.columns[1:]:\n",
    "    temp.append(int(i)-1999)\n",
    "plt.scatter(temp,df.iloc[6,1:])\n",
    "\n",
    "\n",
    "x_line=[]\n",
    "y_line=[]\n",
    "for x in range(1,37):\n",
    "    x_line.append(x)\n",
    "    y_line.append(eq_regression(x))\n",
    "plt.plot(x_line,y_line)\n",
    "plt.xlabel('Years')\n",
    "plt.ylabel('production capacity in %')\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ad8c9efc",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
